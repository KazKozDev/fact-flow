import { VerificationResult, VerificationStatus, Source } from '../types';
import * as wikipediaService from './wikipediaService';
import * as duckduckgoService from './duckduckgoService';

export interface SearchEvidence {
  sources: Array<{
    title: string;
    snippet: string;
    url: string;
    source: 'wikipedia' | 'duckduckgo';
  }>;
  searchQuery: string;
}

export interface ProgressCallback {
  (stage: 'wikipedia' | 'duckduckgo' | 'analyzing' | 'completed', progress: number, foundSources?: number): void;
}

// Main function for fact verification using external sources
export const verifyFactWithSources = async (
  claim: string, 
  onProgress?: ProgressCallback
): Promise<VerificationResult> => {
  try {
    console.log(`Starting fact verification for: "${claim}"`);
    
    // Step 1: Search for evidence
    const evidence = await gatherEvidence(claim, onProgress);
    
    if (evidence.sources.length === 0) {
      onProgress?.('completed', 100, 0);
      return {
        status: VerificationStatus.UNVERIFIED,
        explanation: 'Not enough information found to verify this fact.',
        confidence: 0,
        sources: [],
      };
    }
    
    // Step 2: Interpret results using LLM
    onProgress?.('analyzing', 70, evidence.sources.length);
    const interpretation = await interpretEvidenceWithLLM(claim, evidence);
    
    onProgress?.('completed', 100, evidence.sources.length);
    return interpretation;
  } catch (error) {
    console.error('Error in fact verification:', error);
    return {
      status: VerificationStatus.ERROR,
      explanation: `An error occurred while verifying the fact: ${error instanceof Error ? error.message : 'Unknown error'}`,
      confidence: 0,
      sources: [],
    };
  }
};

// –°–±–æ—Ä –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
const gatherEvidence = async (claim: string, onProgress?: ProgressCallback): Promise<SearchEvidence> => {
  console.log(`Gathering evidence for: "${claim}"`);
  
  const sources: SearchEvidence['sources'] = [];
  
  try {
    // –ü–æ–∏—Å–∫ –≤ Wikipedia
    onProgress?.('wikipedia', 10);
    console.log('Searching Wikipedia...');
    const wikipediaResults = await wikipediaService.searchFactInWikipedia(claim);
    
    for (const result of wikipediaResults) {
      sources.push({
        title: result.title,
        snippet: result.snippet,
        url: result.url,
        source: 'wikipedia'
      });
    }
    
    onProgress?.('wikipedia', 40, sources.length);
    
    // –ü–æ–∏—Å–∫ –≤ DuckDuckGo
    onProgress?.('duckduckgo', 50);
    console.log('Searching DuckDuckGo...');
    const duckduckgoResults = await duckduckgoService.searchFactInDuckDuckGo(claim);
    
    for (const result of duckduckgoResults) {
      sources.push({
        title: result.title,
        snippet: result.snippet,
        url: result.url,
        source: 'duckduckgo'
      });
    }
    
    onProgress?.('duckduckgo', 70, sources.length);
    console.log(`Found ${sources.length} sources for fact verification`);
    
  } catch (error) {
    console.error('Error gathering evidence:', error);
  }
  
  return {
    sources: sources.slice(0, 6), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    searchQuery: claim
  };
};

// –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ —Å –ø–æ–º–æ—â—å—é LLM
const interpretEvidenceWithLLM = async (claim: string, evidence: SearchEvidence): Promise<VerificationResult> => {
  const sourcesText = evidence.sources
    .map((source, index) => 
      `–ò—Å—Ç–æ—á–Ω–∏–∫ ${index + 1} (${source.source}):\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: ${source.title}\n–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: ${source.snippet}\nURL: ${source.url}\n`
    ).join('\n');

  const prompt = `You are a fact-checking expert. Your task is to analyze the claim based on the provided sources and give an objective assessment.

**CLAIM TO VERIFY:**
"${claim}"

**FOUND SOURCES:**
${sourcesText}

**INSTRUCTIONS:**
1. Carefully analyze the claim and compare it with the information from the sources.
2. Determine the status EXACTLY based on factual correspondence:
   - "Verified": The claim FULLY and ACCURATELY MATCHES the sources
   - "Misleading": The claim CONTRADICTS the sources, DISTORTS facts, or contains INACCURACIES
   - "Unverified": Not enough information to determine
3. In the explanation, you MUST specify:
   - What exactly the claim says
   - What the sources show
   - Whether there is a contradiction or correspondence
   - Use words like "contradicts", "does not match", "confirmed", "matches"
4. Assess confidence from 0 to 100

**CRITICALLY IMPORTANT - CONTRADICTION CHECK:**
- NEGATION vs AFFIRMATION: "does NOT have" vs "HAS" = Misleading
- DIFFERENT FACTS: "YES" vs "NO", different dates, numbers, names = Misleading
- OPPOSITES: any contradiction between the claim and the sources = Misleading
- DISTORTIONS: even minor factual inaccuracies = Misleading

**ANALYSIS EXAMPLES:**
- Claim: "Elon Musk has no children" + Source: "Elon Musk has children" ‚Üí Misleading (contradicts sources)
- Claim: "Bitcoin was created in 2009" + Source: "Bitcoin was created in 2008" ‚Üí Misleading (inaccurate date)
- Claim: "Paris is the capital of France" + Source: "Paris is the capital of France" ‚Üí Verified (fully matches)

In the explanation, you MUST use phrases like:
- "The claim contradicts the sources..."
- "Sources show that..."
- "This claim does not match the facts..."
- "The claim is confirmed by the sources..."

Respond in JSON format:
{
  "status": "Verified | Unverified | Misleading",
  "explanation": "Detailed explanation with clear indication of correspondence/contradiction and references to sources",
  "confidence": <number from 0 to 100>
}`;

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ callOllama –∏–∑ geminiService
    const result = await callOllamaForFactCheck(prompt);
    
    if (!result) {
      throw new Error('LLM –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const formattedSources: Source[] = evidence.sources.map(source => ({
      web: {
        uri: source.url,
        title: source.title
      }
    }));
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    console.log(`üîç Original LLM response: status="${result.status}", confidence=${result.confidence}`);
    console.log(`üìù LLM explanation preview: "${result.explanation.substring(0, 150)}..."`);
    
    const correctedStatus = validateStatusAgainstExplanation(
      claim, 
      result.status, 
      result.explanation
    );
    
    if (correctedStatus !== result.status) {
      console.log(`üîß Status corrected: ${result.status} ‚Üí ${correctedStatus}`);
    }
    
    return {
      status: mapStatusToEnum(correctedStatus),
      explanation: result.explanation,
      confidence: result.confidence,
      sources: formattedSources,
    };
    
  } catch (error) {
    console.error('Error interpreting evidence with LLM:', error);
    
    // Fallback: –±–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±–µ–∑ LLM
    return createFallbackInterpretation(claim, evidence);
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ LLM (–∫–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ geminiService)
const callOllamaForFactCheck = async (prompt: string): Promise<{status: string, explanation: string, confidence: number} | null> => {
  const OLLAMA_API_URL = 'http://localhost:11434/api/generate';
  const OLLAMA_MODEL = 'gemma3n:e4b';

  try {
    const response = await fetch(OLLAMA_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: OLLAMA_MODEL,
        prompt: prompt,
        stream: false,
        format: 'json',
      }),
    });

    if (!response.ok) {
      throw new Error(`Ollama API responded with status ${response.status}`);
    }

    const data = await response.json();
    if (data.response) {
      return JSON.parse(data.response);
    }
    return null;
  } catch (error) {
    console.error("Error calling Ollama for fact check:", error);
    return null;
  }
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è LLM
const validateStatusAgainstExplanation = (
  claim: string, 
  originalStatus: string, 
  explanation: string
): string => {
  console.log(`Validating status: ${originalStatus} against explanation for claim: "${claim}"`);
  
  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ª–æ–∂–Ω–æ—Å—Ç—å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const misleadingKeywords = [
    '–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç',
    '–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç',
    '–Ω–µ–≤–µ—Ä–Ω–æ',
    '–ª–æ–∂–Ω–æ',
    '–æ—à–∏–±–æ—á–Ω–æ',
    '–Ω–µ—Ç–æ—á–Ω–æ',
    '–∏—Å–∫–∞–∂–∞–µ—Ç',
    '–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è',
    '–æ–ø—Ä–æ–≤–µ—Ä–≥–∞–µ—Ç—Å—è',
    '–Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ',
    '–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ',
    '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
    '–Ω–µ –∏–º–µ–µ—Ç',
    '–Ω–µ—Ç –¥–µ—Ç–µ–π',
    '–Ω–µ—Ç –∂–µ–Ω—ã',
    '–Ω–µ—Ç –º—É–∂–∞',
    '–æ—Ç—Ä–∏—Ü–∞–µ—Ç',
    '–æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–æ',
    '—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–µ—Ä–Ω–æ',
    '–Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ',
    '–≤ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    '–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –æ–±—Ä–∞—Ç–Ω–æ–µ',
    '—É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ç–æ, —á—Ç–æ',
    '—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤—É—é—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω–µ'
  ];

  // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  const verifiedKeywords = [
    '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è',
    '—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç',
    '–≤–µ—Ä–Ω–æ',
    '–ø—Ä–∞–≤–∏–ª—å–Ω–æ',
    '—Ç–æ—á–Ω–æ',
    '–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
    '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—Ç',
    '—Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è',
    '—Å–æ–≤–ø–∞–¥–∞–µ—Ç',
    '–ø–æ–¥–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è'
  ];

  const explanationLower = explanation.toLowerCase();
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –ª–æ–∂–Ω–æ—Å—Ç—å
  const hasMisleadingIndicators = misleadingKeywords.some(keyword => 
    explanationLower.includes(keyword.toLowerCase())
  );
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
  const hasVerifiedIndicators = verifiedKeywords.some(keyword => 
    explanationLower.includes(keyword.toLowerCase())
  );
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
  const contradictionPatterns = [
    /(?:–∏—Å—Ç–æ—á–Ω–∏–∫–∏?\s+(?:–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç|—É–∫–∞–∑—ã–≤–∞—é—Ç|—É—Ç–≤–µ—Ä–∂–¥–∞—é—Ç|–≥–æ–≤–æ—Ä—è—Ç)\s+(?:—á—Ç–æ\s+)?(?:—É\s+\w+\s+(?:–µ—Å—Ç—å|–∏–º–µ–µ—Ç—Å—è)|—Å—É—â–µ—Å—Ç–≤—É–µ—Ç))/i,
    /(?:–Ω–∞\s+—Å–∞–º–æ–º\s+–¥–µ–ª–µ|–≤\s+–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏|—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏)\s+(?:—É\s+\w+\s+(?:–µ—Å—Ç—å|–∏–º–µ–µ—Ç—Å—è)|—Å—É—â–µ—Å—Ç–≤—É–µ—Ç)/i,
    /(?:—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ\s+(?:–Ω–µ–≤–µ—Ä–Ω–æ|–ª–æ–∂–Ω–æ|–Ω–µ—Ç–æ—á–Ω–æ|–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç))/i,
    /(?:–Ω–µ\s+—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç\s+(?:–¥–∞–Ω–Ω—ã–º|–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏|—Ñ–∞–∫—Ç–∞–º))/i
  ];
  const hasContradictionPattern = contradictionPatterns.some(pattern => 
    pattern.test(explanation)
  );
  
  console.log(`Analysis results:
    - Original status: ${originalStatus}
    - Has misleading indicators: ${hasMisleadingIndicators}
    - Has verified indicators: ${hasVerifiedIndicators}
    - Has contradiction pattern: ${hasContradictionPattern}
    - Explanation preview: ${explanation.substring(0, 200)}...`);
  
  // –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
  if (originalStatus.toLowerCase() === 'verified') {
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "Verified", –Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–µ - –º–µ–Ω—è–µ–º –Ω–∞ Misleading
    if (hasMisleadingIndicators || hasContradictionPattern) {
      console.log('‚ö†Ô∏è Status correction: Verified -> Misleading (based on explanation analysis)');
      return 'Misleading';
    }
  }
  
  if (originalStatus.toLowerCase() === 'misleading') {
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "Misleading", –Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —á–µ—Ç–∫–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç - –º–æ–∂–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å
    if (hasVerifiedIndicators && !hasMisleadingIndicators && !hasContradictionPattern) {
      console.log('‚ö†Ô∏è Status correction: Misleading -> Verified (based on explanation analysis)');
      return 'Verified';
    }
  }
  
  if (originalStatus.toLowerCase() === 'unverified') {
    // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "Unverified", –Ω–æ –µ—Å—Ç—å —á–µ—Ç–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
    if (hasMisleadingIndicators || hasContradictionPattern) {
      console.log('‚ö†Ô∏è Status correction: Unverified -> Misleading (based on explanation analysis)');
      return 'Misleading';
    } else if (hasVerifiedIndicators && !hasMisleadingIndicators) {
      console.log('‚ö†Ô∏è Status correction: Unverified -> Verified (based on explanation analysis)');
      return 'Verified';
    }
  }
  
  console.log(`‚úÖ Status validation passed: keeping original status "${originalStatus}"`);
  return originalStatus;
};

// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ enum
const mapStatusToEnum = (status: string): VerificationStatus => {
  switch (String(status).toLowerCase()) {
    case 'verified':
      return VerificationStatus.VERIFIED;
    case 'unverified':
      return VerificationStatus.UNVERIFIED;
    case 'misleading':
      return VerificationStatus.MISLEADING;
    default:
      return VerificationStatus.ERROR;
  }
};

// Fallback –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –±–µ–∑ LLM
const createFallbackInterpretation = (_claim: string, evidence: SearchEvidence): VerificationResult => {
  const sourceCount = evidence.sources.length;
  const wikipediaSources = evidence.sources.filter(s => s.source === 'wikipedia').length;
  
  let status: VerificationStatus;
  let confidence: number;
  let explanation: string;
  
  if (sourceCount === 0) {
    status = VerificationStatus.UNVERIFIED;
    confidence = 0;
    explanation = 'No sources found to verify this statement.';
  } else if (wikipediaSources > 0) {
    status = VerificationStatus.VERIFIED;
    confidence = Math.min(60 + (sourceCount * 10), 85);
    explanation = `Found ${sourceCount} sources, including ${wikipediaSources} from Wikipedia. Additional verification is required for a final conclusion.`;
  } else {
    status = VerificationStatus.UNVERIFIED;
    confidence = Math.min(30 + (sourceCount * 5), 50);
    explanation = `Found ${sourceCount} sources, but more detailed analysis is required for a final conclusion.`;
  }
  
  const formattedSources: Source[] = evidence.sources.map(source => ({
    web: {
      uri: source.url,
      title: source.title
    }
  }));
  
  return {
    status,
    explanation,
    confidence,
    sources: formattedSources,
  };
};
